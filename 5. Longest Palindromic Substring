var longestPalindrome = function (s) {
    if (s.length === 0) return "";
    let start = 0;
    let maxLength = 0;
    const expandAroundCenter = (left, right) => {
        console.log(right-left+1);
        while (left >= 0 && right < s.length && s[left] === s[right]) {
            left--;
            right++;
        }
        return right - left - 1; 
    };

    for (let i = 0; i < s.length; i++) {
        let len1 = expandAroundCenter(i, i);
        let len2 = expandAroundCenter(i, i + 1);

        let len = Math.max(len1, len2);

        if (len > maxLength) {
            maxLength = len;
            start = i - Math.floor((len - 1) / 2);
        }
    }

    return s.slice(start, start + maxLength);
};
console.log(longestPalindrome('babad'));
//time complexity-O(n^2) space complexity-O(1)
