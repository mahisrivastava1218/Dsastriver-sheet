var myAtoi = function(s) {
    const INT_MIN = -(2 ** 31);
    const INT_MAX = 2 ** 31 - 1;
    
    function helper(index, num, sign) {
        if (index >= s.length || s[index] < '0' || s[index] > '9') {
            return Math.max(INT_MIN, Math.min(INT_MAX, sign * num));
        }

        num = num * 10 + Number(s[index]);
        if (sign * num < INT_MIN) return INT_MIN;
        if (sign * num > INT_MAX) return INT_MAX;
        return helper(index + 1, num, sign);
    }

    let i = 0;
    
    while (i < s.length && s[i] === ' ') i++;

    let sign = 1;
    if (i < s.length && (s[i] === '-' || s[i] === '+')) {
        sign = s[i] === '-' ? -1 : 1;
        i++;
    }
     return helper(i, 0, sign);
};
//time complexity - O(n) space complexity due to recursion-O(n)
